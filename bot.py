import os
import requests
import time
from datetime import datetime
import re
import json
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler
from bs4 import BeautifulSoup
import random

# –¢–æ–∫–µ–Ω–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_TOKEN = "7908433957:AAEyetZTWACBNn6t-wHPQwB89p1PtkQEvfg"
CHANNEL_ID = "@fiveleaguesua"
ADMIN_CHAT_ID = "YOUR_ADMIN_CHAT_ID"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à chat_id –¥–ª—è –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è

# –°–ª–æ–≤–Ω–∏–∫ –∫–ª—É–±—ñ–≤
CLUBS = {
    'manchester united': 'üî¥ –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥',
    'manchester city': 'üîµ –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°—ñ—Ç—ñ',
    'liverpool': 'üî¥ –õ—ñ–≤–µ—Ä–ø—É–ª—å',
    'chelsea': 'üîµ –ß–µ–ª—Å—ñ',
    'arsenal': 'üî¥ –ê—Ä—Å–µ–Ω–∞–ª',
    'tottenham': '‚ö™ –¢–æ—Ç—Ç–µ–Ω–≥–µ–º',
    'real madrid': '‚ö™ –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥',
    'barcelona': 'üîµ –ë–∞—Ä—Å–µ–ª–æ–Ω–∞',
    'atletico madrid': 'üî¥ –ê—Ç–ª–µ—Ç—ñ–∫–æ –ú–∞–¥—Ä–∏–¥',
    'juventus': '‚ö´ –Æ–≤–µ–Ω—Ç—É—Å',
    'milan': 'üî¥ –ú—ñ–ª–∞–Ω',
    'inter milan': 'üîµ –Ü–Ω—Ç–µ—Ä',
    'bayern munich': 'üî¥ –ë–∞–≤–∞—Ä—ñ—è',
    'psg': 'üîµ –ü–°–ñ',
    'borussia dortmund': 'üü° –ë–æ—Ä—É—Å—ñ—è –î–æ—Ä—Ç–º—É–Ω–¥'
}

processed_articles = set()
pending_posts = {}

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

def get_user_agent():
    """–í–∏–ø–∞–¥–∫–æ–≤–∏–π User-Agent"""
    agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',
        'Mozilla/5.0 (X11; Linux x86_64)'
    ]
    return random.choice(agents)


def translate_text(text):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É"""
    try:
        text = re.sub(r'<[^>]+>', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
        if len(text) > 400:
            text = text[:400]
        services = [
            "https://api.mymemory.translated.net/get",
            "https://translate.googleapis.com/translate_a/single"
        ]
        for service in services:
            try:
                if "mymemory" in service:
                    params = {'q': text, 'langpair': 'en|uk'}
                    resp = requests.get(service, params=params, timeout=10)
                    data = resp.json()
                    trans = data.get('responseData', {}).get('translatedText')
                    if trans and "WARNING" not in trans.upper():
                        return clean_translation(trans)
                else:
                    params = {'client':'gtx','sl':'en','tl':'uk','dt':'t','q':text}
                    resp = requests.get(service, params=params, timeout=10)
                    res = resp.json()
                    if res and res[0]:
                        trans = ''.join([x[0] for x in res[0] if x[0]])
                        return clean_translation(trans)
            except:
                continue
        return text
    except:
        return text


def clean_translation(text):
    """–û—á–∏—â–µ–Ω–Ω—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
    replacements = {
        '—ñ–Ω—Ç–µ—Ä–Ω–∞—Ü—ñ–æ–Ω–∞–ª–µ': '–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π',
        '—Ä–µ–∞–ª –º–∞–¥—Ä–∏–¥': '–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥',
        '–±–∞—Ä—Å–µ–ª–æ–Ω–∞': '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞',
        '–º–∞–Ω—á–µ—Å—Ç–µ—Ä —é–Ω–∞–π—Ç–µ–¥': '–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥',
        '–ª—ñ–≤–µ—Ä–ø—É–ª—å': '–õ—ñ–≤–µ—Ä–ø—É–ª—å',
        '—á–µ–ª—Å—ñ': '–ß–µ–ª—Å—ñ',
        '–∞—Ä—Å–µ–Ω–∞–ª': '–ê—Ä—Å–µ–Ω–∞–ª',
        '–±–∞–≤–∞—Ä—ñ—è –º—é–Ω—Ö–µ–Ω': '–ë–∞–≤–∞—Ä—ñ—è',
        '–ø—Å –∂–µ—Ä–º–µ–Ω': '–ü–°–ñ'
    }
    for eng, ua in replacements.items():
        text = re.sub(re.escape(eng), ua, text, flags=re.IGNORECASE)
    return text


def get_club_name(text):
    """–û—Ç—Ä–∏–º—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —ñ–º'—è –∫–ª—É–±—É –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º"""
    t = text.lower()
    for eng, ua in CLUBS.items():
        if eng in t:
            return ua
    return None


def determine_post_type(title, description):
    text = (title + ' ' + description).lower()
    if any(w in text for w in ['transfer','signing','deal','million']): return 'transfer'
    if any(w in text for w in ['injury','ruled out','injured']): return 'injury'
    if any(w in text for w in ['sacked','fired','appointed']): return 'manager'
    if any(w in text for w in ['goal','scored','performance']): return 'performance'
    return 'general'

# –ü–∞—Ä—Å–µ—Ä–∏

def parse_bbc_sport():
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–∏–Ω –∑ BBC Sport"""
    try:
        url = 'https://www.bbc.com/sport/football'
        resp = requests.get(url, headers={'User-Agent':get_user_agent()}, timeout=15)
        soup = BeautifulSoup(resp.content, 'html.parser')
        arts = []
        for art in soup.find_all(['article','div'], class_=re.compile(r'(story|article|item)')):
            try:
                t = art.find(['h1','h2','h3'], class_=re.compile(r'(title|headline)'))
                if not t: continue
                title = t.get_text(strip=True)
                desc = art.find('p').get_text(strip=True) if art.find('p') else ''
                h = hash(title)
                if len(title)>20 and h not in processed_articles:
                    arts.append({'title':title,'description':desc,'source':'BBC Sport','hash':h})
            except:
                continue
        return arts[:5]
    except Exception as e:
        print(f'‚ùå BBC error: {e}')
        return []

def parse_sky_sports():
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–∏–Ω –∑ Sky Sports"""
    try:
        url = 'https://www.skysports.com/football/news'
        resp = requests.get(url, headers={'User-Agent':get_user_agent()}, timeout=15)
        soup = BeautifulSoup(resp.content, 'html.parser')
        arts=[]
        for art in soup.find_all(['div','article'], class_=re.compile(r'(news-list|story)')):
            try:
                t = art.find(['h1','h2','h3','h4'])
                if not t: continue
                title = t.get_text(strip=True)
                desc = art.find('p').get_text(strip=True) if art.find('p') else ''
                h=hash(title)
                if len(title)>20 and h not in processed_articles:
                    arts.append({'title':title,'description':desc,'source':'Sky Sports','hash':h})
            except:
                continue
        return arts[:5]
    except Exception as e:
        print(f'‚ùå Sky error: {e}')
        return []

def parse_marca():
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–∏–Ω –∑ Marca"""
    try:
        url = 'https://www.marca.com/en/football.html'
        resp = requests.get(url, headers={'User-Agent':get_user_agent()}, timeout=15)
        soup = BeautifulSoup(resp.content, 'html.parser')
        arts=[]
        for art in soup.find_all(['article','div'], class_=re.compile(r'(article|story|news)')):
            try:
                t = art.find(['h1','h2','h3'])
                if not t: continue
                title = t.get_text(strip=True)
                desc = art.find('p').get_text(strip=True) if art.find('p') else ''
                h=hash(title)
                if len(title)>20 and h not in processed_articles:
                    arts.append({'title':title,'description':desc,'source':'Marca','hash':h})
            except:
                continue
        return arts[:5]
    except Exception as e:
        print(f'‚ùå Marca error: {e}')
        return []

# –ó–±—ñ—Ä —ñ –≤–∏–±—ñ—Ä –Ω–æ–≤–∏–Ω–∏

def get_football_news():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç –∑ –Ω–∞–π–∫—Ä–∞—â–æ—é –Ω–æ–≤–∏–Ω–æ—é"""
    all_arts=[]
    all_arts.extend(parse_bbc_sport()); time.sleep(2)
    all_arts.extend(parse_sky_sports()); time.sleep(2)
    all_arts.extend(parse_marca())
    if all_arts:
        best = max(all_arts, key=lambda x: len(x['title'])+len(x['description']))
        processed_articles.add(best['hash'])
        return [format_post(best['title'], best['description'], best['source'])]
    return []

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç—É

def format_post(title, description, source="Football News"):
    """–§–æ—Ä–º—É—î–º–æ –µ–º–æ—Ü—ñ–π–Ω–∏–π –ø–æ—Å—Ç —É —Å—Ç–∏–ª—ñ '–°–ø–æ—Ä—Ç—Å'"""
    post_type = determine_post_type(title, description)
    emoji_map = {"transfer":"üí∞","injury":"üè•","manager":"üëî","performance":"‚öΩ","general":"üì∞"}
    emoji = emoji_map.get(post_type, "üì∞")
    title_ua = translate_text(title)
    desc_ua = translate_text(description) if description else ""
    club = get_club_name(title + " " + description)
    club_str = f"{club} " if club else ""
    headline = f"{emoji} {club_str}{title_ua.strip()}".strip()
    short_desc = desc_ua.strip()
    if len(short_desc)>300: short_desc = short_desc[:300] + "‚Ä¶"
    punch = (
        "üî• –£–≤—ñ–º–∫–Ω—É–≤ —Ä–µ–∂–∏–º –±–æ–º–±–∞—Ä–¥–∏—Ä–∞!" if post_type=="performance" else
        "üí• –¶–µ –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ö—ñ–¥ —Å–µ–∑–æ–Ω—É." if post_type=="transfer" else
        "ü§ï –í—Ç—Ä–∞—Ç–∏–ª–∏ –∫–ª—é—á–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è." if post_type=="injury" else
        "üëÄ –°–ª—ñ–¥–∫—É—î–º–æ –∑–∞ —Ä–æ–∑–≤–∏—Ç–∫–æ–º."
    )
    post = f"<b>{headline}</b>\n\n" + f"{short_desc}\n\n" + f"{punch}\n" + f"üì∞ –î–∂–µ—Ä–µ–ª–æ: <i>{source}</i>"
    return post

# –í–∑–∞—î–º–æ–¥—ñ—è –∑ Telegram API

def send_message(text, chat_id=CHANNEL_ID, reply_markup=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data={"chat_id":chat_id,"text":text,"parse_mode":"HTML","disable_web_page_preview":True}
    if reply_markup: data["reply_markup"]=json.dumps(reply_markup)
    try: return requests.post(url,data=data,timeout=10)
    except Exception as e: print(f"‚ùå Send error: {e}"); return None

def create_approval_keyboard():
    return {"inline_keyboard":[[{"text":"‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏","callback_data":"approve"},{"text":"‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏","callback_data":"reject"}]]}

def handle_callback(update):
    try:
        cb=update.get('callback_data')
        mid=update.get('message',{}).get('message_id')
        if cb=='approve' and mid in pending_posts:
            txt=pending_posts[mid]; res=send_message(txt,CHANNEL_ID)
            if res and res.status_code==200: edit_message(mid,"‚úÖ <b>–û–ü–£–ë–õ–Ü–ö–û–í–ê–ù–û!</b>")
            else: edit_message(mid,"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
            del pending_posts[mid]
        elif cb=='reject' and mid in pending_posts:
            edit_message(mid,"‚ùå <b>–í–Ü–î–•–ò–õ–ï–ù–û</b>"); del pending_posts[mid]
    except Exception as e:
        print(f"‚ùå Callback error: {e}")

def edit_message(message_id,new_text):
    url=f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/editMessageText"
    data={"chat_id":ADMIN_CHAT_ID,"message_id":message_id,"text":new_text,"parse_mode":"HTML"}
    try: requests.post(url,data=data,timeout=10)
    except Exception as e: print(f"‚ùå Edit error: {e}")

def check_updates():
    try:
        url=f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
        r=requests.get(url,timeout=10)
        if r.status_code==200:
            for upd in r.json().get('result',[]):
                if 'callback_query' in upd: handle_callback(upd['callback_query'])
    except Exception as e: print(f"‚ùå Updates error: {e}")

def run_server():
    port=int(os.environ.get('PORT',5000))
    srv=HTTPServer(('',port),SimpleHTTPRequestHandler)
    print(f"üåê Server on port {port}")
    srv.serve_forever()

def main():
    print("ü§ñ Five Leagues Bot v3.0 –∑–∞–ø—É—â–µ–Ω–æ!")
    if ADMIN_CHAT_ID=="YOUR_ADMIN_CHAT_ID": print("‚ö†Ô∏è Set ADMIN_CHAT_ID!")
    start=f"ü§ñ <b>Five Leagues Bot v3.0 –∑–∞–ø—É—â–µ–Ω–æ!</b> üá∫üá¶\n‚öΩ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ —Ç–æ–ø-–Ω–æ–≤–∏–Ω–∏..."
    res=send_message(start)
    if res and res.status_code==200: print("‚úÖ Start sent")
    while True:
        try:
            print(f"üïê {datetime.now().strftime('%H:%M:%S')} - –ó–±—ñ—Ä –Ω–æ–≤–∏–Ω...")
            check_updates()
            posts=get_football_news()
            if posts:
                msg=f"üìã <b>–ù–û–í–ò–ù–ê –ù–ê –ü–û–ì–û–î–ñ–ï–ù–ù–Ø:</b>\n\n{'-'*30}\n\n{posts[0]}\n\n{'-'*30}"
                kb=create_approval_keyboard()
                r=send_message(msg,ADMIN_CHAT_ID,kb)
                if r and r.status_code==200:
                    mid=r.json().get('result',{}).get('message_id')
                    if mid: pending_posts[mid]=posts[0]
            time.sleep(1800)
        except Exception as e:
            print(f"‚ùå Main loop error: {e}")
            time.sleep(300)

if __name__=='__main__':
    threading.Thread(target=run_server,daemon=True).start()
    main()
