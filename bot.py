import os
import requests
import time
from datetime import datetime
import re
import json

TELEGRAM_TOKEN = "7908433957:AAEyetZTWACBNn6t-wHPQwB89p1PtkQEvfg"
CHANNEL_ID = "@fiveleaguesua"

# API –Ω–æ–≤–∏–Ω (–∑–∞–º—ñ—Å—Ç—å RSS)
NEWS_SOURCES = [
    "http://newsapi.org/v2/everything?q=football+premier+league&language=en&apiKey=demo",  # Demo key
    "https://www.goal.com/api/feeds/news?fmt=json&edition=en",
]

IMPORTANT_KEYWORDS = [
    "manchester", "liverpool", "chelsea", "arsenal", "tottenham",
    "real madrid", "barcelona", "atletico",
    "juventus", "milan", "inter", "napoli",
    "bayern", "dortmund", "leipzig",
    "psg", "lyon", "marseille",
    "champions league", "europa league", "transfer", "injury",
    "sacked", "appointed", "contract", "million"
]

processed_articles = set()

def translate_text(text):
    """–ü–µ—Ä–µ–∫–ª–∞–¥ —á–µ—Ä–µ–∑ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π API"""
    try:
        url = "https://api.mymemory.translated.net/get"
        params = {'q': text[:500], 'langpair': 'en|uk'}
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        
        if 'responseData' in data:
            translated = data['responseData']['translatedText']
            if "MYMEMORY WARNING" not in translated.upper():
                return translated
        return text
    except:
        return text

def send_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHANNEL_ID, "text": text, "parse_mode": "HTML"}
    return requests.post(url, data=data)

def is_important_news(title, description):
    text = (title + " " + description).lower()
    return any(keyword in text for keyword in IMPORTANT_KEYWORDS)

def format_post(title, description, source="Football News"):
    """–§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
    title_ua = translate_text(title)
    
    emoji = "‚öΩÔ∏è"
    if "transfer" in title.lower() or "million" in title.lower():
        emoji = "üí∞"
    elif "injury" in title.lower():
        emoji = "üè•"
    elif "sacked" in title.lower() or "appointed" in title.lower():
        emoji = "üìã"
    
    post = f"{emoji} <b>{title_ua}</b>\n\n"
    
    if description:
        description = re.sub('<.*?>', '', description)
        if len(description) > 300:
            description = description[:300] + "..."
        description_ua = translate_text(description)
        post += f"{description_ua}\n\n"
    
    post += f"üì∞ <i>–î–∂–µ—Ä–µ–ª–æ: {source}</i>"
    return post

def get_football_news():
    """–û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–Ω–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∏"""
    articles = []
    
    # –¢–µ—Å—Ç–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ (–ø–æ–∫–∏ API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ)
    test_news = [
        {
            "title": "Manchester United agree ¬£60m deal for Bruno Fernandes replacement",
            "description": "Manchester United have reached an agreement to sign the Portuguese midfielder in a deal worth ¬£60 million including add-ons.",
            "source": "Sky Sports"
        },
        {
            "title": "Liverpool injury update: Mohamed Salah ruled out for three weeks",
            "description": "Liverpool forward Mohamed Salah has been ruled out for three weeks with a hamstring injury sustained during training.",
            "source": "BBC Sport"
        }
    ]
    
    for news in test_news:
        if is_important_news(news["title"], news["description"]):
            formatted = format_post(news["title"], news["description"], news["source"])
            articles.append(formatted)
            print(f"‚úÖ –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ –ø–æ—Å—Ç:")
            print("="*50)
            print(formatted)
            print("="*50)
    
    return articles

def main():
    send_message("ü§ñ Five Leagues Bot –∑–∞–ø—É—â–µ–Ω–æ! üá∫üá¶")
    
    while True:
        try:
            print(f"üïê {datetime.now()} - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏–Ω...")
            articles = get_football_news()
            
            if articles:
                best_article = articles[0]
                approval_msg = f"üìã <b>–ù–û–í–ò–ù–ê –ù–ê –ü–û–ì–û–î–ñ–ï–ù–ù–Ø:</b>\n\n{best_article}\n\n‚ùì –ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏? –¢–ê–ö/–ù–Ü"
                send_message(approval_msg)
                print("üì§ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è")
            
            time.sleep(1800)  # 30 —Ö–≤–∏–ª–∏–Ω
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(300)

if __name__ == "__main__":
    main()

# Render server
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler

def run_server():
    port = int(os.environ.get("PORT", 5000))
    server = HTTPServer(('', port), SimpleHTTPRequestHandler)
    server.serve_forever()

threading.Thread(target=run_server, daemon=True).start()
