import os
import requests
import time
import feedparser
from datetime import datetime, timedelta
import re

TELEGRAM_TOKEN = "7908433957:AAEyetZTWACBNn6t-wHPQwB89p1PtkQEvfg"
CHANNEL_ID = "@fiveleaguesua"

# RSS –¥–∂–µ—Ä–µ–ª–∞ —Ç–æ–ø–æ–≤–∏—Ö –ó–ú–Ü
RSS_FEEDS = [
    "https://www.skysports.com/rss/football",
    "http://feeds.bbci.co.uk/sport/football/rss.xml",
    "https://www.espn.com/espn/rss/soccer/news",
    "https://www.goal.com/feeds/news?fmt=rss&edition=en",
]

# –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≤–∞–∂–ª–∏–≤–∏—Ö –Ω–æ–≤–∏–Ω
IMPORTANT_KEYWORDS = [
    "manchester", "liverpool", "chelsea", "arsenal", "tottenham",
    "real madrid", "barcelona", "atletico", "sevilla",
    "juventus", "milan", "inter", "napoli", "roma",
    "bayern", "dortmund", "leipzig",
    "psg", "lyon", "marseille",
    "champions league", "europa league", "transfer", "injury",
    "sacked", "appointed", "contract", "million", "record"
]

processed_articles = set()

def translate_text(text):
    """–ü–µ—Ä–µ–∫–ª–∞–¥ —á–µ—Ä–µ–∑ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π API Google Translate"""
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ MyMemory API (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π)
        url = "https://api.mymemory.translated.net/get"
        params = {
            'q': text[:500],  # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
            'langpair': 'en|uk'  # –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
        }
        
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        
        if 'responseData' in data and data['responseData']['translatedText']:
            translated = data['responseData']['translatedText']
            
            # –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –ø–æ–≥–∞–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            if "MYMEMORY WARNING" in translated.upper():
                return text
            
            return translated
        else:
            return text
            
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")
        return text

def send_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": CHANNEL_ID, "text": text, "parse_mode": "HTML"}
    response = requests.post(url, data=data)
    return response.json()

def is_important_news(title, description):
    text = (title + " " + description).lower()
    return any(keyword in text for keyword in IMPORTANT_KEYWORDS)

def format_post(title, description, source):
    """–§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ—Å—Ç —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∂—É—Ä–Ω–∞–ª—ñ—Å—Ç"""
    
    # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_ua = translate_text(title)
    
    # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–µ–º–∏
    emoji = "‚öΩÔ∏è"
    title_lower = title.lower()
    if "transfer" in title_lower or "million" in title_lower:
        emoji = "üí∞"
    elif "injury" in title_lower or "injured" in title_lower:
        emoji = "üè•"
    elif "sacked" in title_lower or "appointed" in title_lower:
        emoji = "üìã"
    elif "champions league" in title_lower:
        emoji = "üèÜ"
    
    post = f"{emoji} <b>{title_ua}</b>\n\n"
    
    if description:
        # –û—á–∏—â–∞—î–º–æ HTML —Ç–µ–≥–∏
        description = re.sub('<.*?>', '', description)
        
        # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ —Ä–æ–∑—É–º–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
        if len(description) > 300:
            description = description[:300] + "..."
        
        # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –æ–ø–∏—Å
        description_ua = translate_text(description)
        post += f"{description_ua}\n\n"
    
    # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –Ω–∞–∑–≤—É –¥–∂–µ—Ä–µ–ª–∞
    source_translations = {
        "Sky Sports Football": "Sky Sports",
        "BBC Sport - Football": "BBC Sport",
        "ESPN Soccer": "ESPN",
        "Goal.com": "Goal.com"
    }
    
    source_ua = source_translations.get(source, source)
    post += f"üì∞ <i>–ó–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é {source_ua}</i>"
    
    return post

def get_news():
    new_articles = []
    
    for feed_url in RSS_FEEDS:
        try:
            print(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é: {feed_url}")
            feed = feedparser.parse(feed_url)
            source_name = feed.feed.title if hasattr(feed.feed, 'title') else "Football News"
            
            for entry in feed.entries[:5]:  # –¢—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –Ω–æ–≤–∏–Ω
                article_id = entry.link
                
                if article_id not in processed_articles:
                    title = entry.title
                    description = entry.get('summary', '')
                    
                    if is_important_news(title, description):
                        print(f"‚úÖ –í–∞–∂–ª–∏–≤–∞ –Ω–æ–≤–∏–Ω–∞: {title[:50]}...")
                        formatted_post = format_post(title, description, source_name)
                        new_articles.append((formatted_post, article_id))
                        processed_articles.add(article_id)
                        
                        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                        print(f"üì∞ –ì–û–¢–û–í–ò–ô –ü–û–°–¢:")
                        print("="*50)
                        print(formatted_post)
                        print("="*50)
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑ {feed_url}: {e}")
    
    return new_articles

def main():
    send_message("ü§ñ Five Leagues Bot –∑–∞–ø—É—â–µ–Ω–æ! –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏–Ω –∞–∫—Ç–∏–≤–Ω–∏–π.")
    
    while True:
        try:
            print(f"üïê {datetime.now()} - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏–Ω...")
            articles = get_news()
            
            if articles:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É —Å—Ç–∞—Ç—Ç—é –Ω–∞ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è
                best_article = articles[0][0]
                
                approval_text = f"üìã <b>–ù–û–í–ò–ù–ê –ù–ê –ü–û–ì–û–î–ñ–ï–ù–ù–Ø:</b>\n\n{best_article}\n\n‚ùì –ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏? –í—ñ–¥–ø–æ–≤—ñ–¥—å: –¢–ê–ö/–ù–Ü/–í–ò–ü–†–ê–í–ò–¢–ò"
                print("üì§ –ù–∞–¥—Å–∏–ª–∞—é –Ω–∞ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è...")
                send_message(approval_text)
            else:
                print("‚ÑπÔ∏è –í–∞–∂–ª–∏–≤–∏—Ö –Ω–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            print(f"üò¥ –°–ø–ª—é 30 —Ö–≤–∏–ª–∏–Ω –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
            time.sleep(1800)  # 30 —Ö–≤–∏–ª–∏–Ω
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

# –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é
def test_single_post():
    """–¢–µ—Å—Ç—É—î–º–æ –æ–¥–∏–Ω –ø–æ—Å—Ç –æ–¥—Ä–∞–∑—É"""
    print("üß™ –¢–ï–°–¢–û–í–ò–ô –†–ï–ñ–ò–ú")
    articles = get_news()
    if not articles:
        print("‚ùå –ù–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(articles)} –Ω–æ–≤–∏–Ω")

if __name__ == "__main__":
    # test_single_post()  # –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É
    main()

# –î–ª—è Render
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler

def run_server():
    port = int(os.environ.get("PORT", 5000))
    server = HTTPServer(('', port), SimpleHTTPRequestHandler)
    server.serve_forever()

threading.Thread(target=run_server, daemon=True).start()
